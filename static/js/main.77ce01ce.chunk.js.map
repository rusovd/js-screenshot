{"version":3,"sources":["TakeSnapshotButton.jsx","DearSanta.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TakeSnapshotButton","props","makeScreenshot","a","setVisible","html2canvas","document","getElementById","targetID","allowTaint","logging","useCORS","then","canvas","window","open","write","toDataURL","useState","visible","style","display","onClick","children","BetOnRusFuture","state","penances","id","name","image","gameTime","toEditTeam","toEditPenance","generatePenances","map","val","idx","alt","className","src","width","height","backgroundColor","key","axis","handle","defaultPosition","x","y","position","grid","onContextMenu","e","preventDefault","editPenance","marginTop","padding","marginLeft","lineHeight","color","fontSize","fontWeight","opacity","placeholder","textAlign","border","borderBottom","this","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77ce01ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport html2canvas from \"html2canvas\";\n\nconst TakeSnapshotButton = (props) => {\n\n  const makeScreenshot = async () => {\n    await setVisible('none');\n    html2canvas(document.getElementById(props.targetID), {\n      allowTaint: false,\n      logging: true,\n      useCORS: true\n    }).then(function (canvas) {\n\n      window.open().document.write('<img src=\"' + canvas.toDataURL() + '\" />');\n    });\n  };\n\n  const [visible, setVisible] = useState(true || props.visible);\n\n  return (\n    <span>\n    <div style={{display: visible}} onClick={makeScreenshot}>\n      {props.children}\n    </div>\n    </span>\n    )\n\n}\n\nexport default TakeSnapshotButton;","import React from \"react\";\nimport Draggable from \"react-draggable\";\nimport html2canvas from \"html2canvas\";\nimport TakeSnapshotButton from \"./TakeSnapshotButton\";\nimport \"./DearSanta.css\";\n\nexport default class BetOnRusFuture extends React.Component {\n  state = {\n    penances: [\n      { id: 1, name: \"↯\", image: './assets/1.png' },\n      { id: 2, name: \"↯\", image: './assets/2.png' },\n      { id: 3, name: \"↯\", image: './assets/3.png' },\n      { id: 4, name: \"↯\", image: './assets/4.png' },\n      { id: 5, name: \"↯\", image: './assets/5.png' },\n      { id: 6, name: \"↯\", image: './assets/6.png' },\n      { id: 7, name: \"↯\", image: './assets/7.png' },\n      { id: 8, name: \"↯\", image: './assets/8.png' },\n      { id: 9, name: \"↯\", image: './assets/9.png' },\n      { id: 10, name: \"↯\", image: './assets/10.png' },\n      { id: 11, name: \"↯\", image: './assets/11.png' }\n    ],\n\n    gameTime: \"2018-08-09 22:53\",\n    toEditTeam: null,\n    toEditPenance: null\n  };\n\n  generatePenances = penances => {\n    return penances.map((val, idx) => {\n      let image = val.image ? (\n        <img alt={val.name} className=\"penance-image\" src={val.image} />\n      ) : (\n          <img\n            alt={val.name}\n            className=\"penance-image\"\n            src=\"assets/1.png\"\n            style={{ width: \"40px\", height: \"40px\", backgroundColor: \"#ffffff\" }}\n          />\n        );\n\n      return (\n        <Draggable\n          key={val.id}\n          axis=\"both\"\n          handle=\".handle\"\n          defaultPosition={{ x: 0, y: 0 }}\n          position={null}\n          grid={[3, 3]}\n        >\n          <div\n            className=\"penance-cont handle\"\n            onContextMenu={e => {\n              e.preventDefault();\n              this.editPenance(idx);\n            }}\n          >\n            {image}\n            <span className=\"penance-name\">{val.name}</span>\n          </div>\n        </Draggable>\n      );\n    });\n  };\n\n  render() {\n   \n    return (\n      <div className=\"container\">\n        <div className=\"left background-map\" id=\"screenshotArea\">\n          {/* <button onClick={() => this.makeScreenshot()}>Take Screenshot</button> */}\n          <div style={{display:'block', marginTop: '220px'}}>\n            <div style={{padding: '15px', marginLeft:'50px', lineHeight: '2rem', color: '#4b87f3', fontSize:'1.2rem', fontWeight: '600', backgroundColor: 'white', opacity:'0.8', width: '400px'}}>\n            {/* IF targetId is omitted then screenshot will take the 'body' */}\n              Dear Santa,<br/><br/>\n              My name is &nbsp;\n              <input placeholder=\"your name\" style={{color: '#4b87f3', textAlign: 'center', fontSize:'22px', fontWeight: '600',width: '200px', border: 'none', borderBottom: '1px solid black'}}></input><br/>&nbsp;\n              I'm waiting for long time to write you this letter. Mom says that i've been really good last &nbsp;\n              <input placeholder=\"your age\" style={{color: '#4b87f3', textAlign: 'center', fontSize:'22px', fontWeight: '600',width: '130px', border: 'none', borderBottom: '1px solid black'}}></input>\n                &nbsp;years... I never asked you for anything. <br/>But now, I beg you to punish fucking Terrorussians.<br/>They deserve it!<br/><br/>PS>If you find this very troublesome, please at least make so that Huylo is dead.<br/><br/>\n            </div>\n            <TakeSnapshotButton targetID={\"screenshotArea\"} visible={true}>\n              <div className=\"animated-box in blinking-text\" >\n                <h1>Take the Screenshot</h1>\n                <p>of your wish list letter <br/>and then send it to Santa</p>\n              </div>\n            </TakeSnapshotButton>\n            <div className=\"field-borders\">{this.generatePenances(this.state.penances)}</div>\n          </div>\n        </div>\n\n        <div className=\"right\">\n           <div className=\"field background-lineup\">\n              <p className='blinking-text' style={{fontWeight: 800, fontSize: 16, color: 'white', padding: 20}}>Place the icons on the map using drag drop, and then take a screenshot for the letter to Santa Claus:</p>\n              <hr></hr>\n              \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport DearSanta from './DearSanta';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DearSanta/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}